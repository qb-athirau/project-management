{"version":3,"sources":["slices/toasterSlice.js","configs/styles/mediaQueries.js","configs/errorText.js","configs/styles/colorThemes.js","pages/LandingPage/slice.js","store/rootReducer.js","store/index.js","components/Loader/style.js","components/Loader/index.js","assets/fonts/Poppins/Poppins-Light.ttf","components/ComponentLoading/style.js","components/ComponentLoading/index.js","pages/PageNotFound/index.js","pages/LandingPage/index.js","routes/index.js","components/Toast/style.js","components/Toast/index.js","App.js","serviceWorker.js","index.js"],"names":["toaster","createSlice","name","initialState","toastObj","value","message","variant","reducers","updateToast","state","action","payload","actions","media","mediumScreen","mobileScreen","smallScreen","portrait","landscape","FailedLoading","validationText","requireName","requireStatus","colorThemes","pureWhite","Gray20","buttonGreen","speechBlue","veryLightGrey","lightGrey","intermediateGrey","flatBlue","landing","projects","loading","setProjectStart","setProjects","addProjects","push","setProjectFailure","reducerList","toasterReducer","landingReducer","rootReducer","combineReducers","appStore","configureStore","reducer","devTools","process","MainLoaderWrapper","styled","div","props","theme","astronautBlue","MainLoader","spin","icon","faSpinner","className","module","exports","Mask","PlaceholderWrap","Message","ComponentLoading","error","timedOut","pastDelay","status","defaultProps","PageNotFoundComponent","Loadable","loader","timeout","PageNotFound","displayName","LandingComponent","Landing","AppRouter","path","component","Layout","show","toastWarning","toastError","toastInfo","connect","dispatch","useEffect","setTimeout","handleClose","onClick","App","store","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7217928a.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nconst initialState = {\r\n  toastObj: {\r\n    value: false,\r\n    message: '',\r\n    variant: '',\r\n  },\r\n};\r\nconst toaster = createSlice({\r\n  name: 'toaster',\r\n  initialState,\r\n  reducers: {\r\n    updateToast(state, action) {\r\n      state.toastObj = action.payload;\r\n    },\r\n  },\r\n});\r\nexport const { updateToast } = toaster.actions;\r\nexport default toaster.reducer;\r\n","export const media = {\r\n  mediumScreen: '@media (min-width: 1024px)',\r\n  mobileScreen: '@media (max-width: 831px)',\r\n  smallScreen: '@media (max-width: 376px)',\r\n  portrait: '@media screen and (orientation: portrait)',\r\n  landscape: '@media screen and (orientation: landscape)',\r\n};\r\n","export const FailedLoading = 'Failed to load page! Try refreshing.';\r\n\r\nexport const validationText = {\r\n  requireName: 'Please enter a name',\r\n  requireStatus: 'Please enter status percentage',\r\n};\r\n","const colorThemes = {\r\n  pureWhite: '#fff',\r\n  Gray20: '#333',\r\n  buttonGreen: '#00cc00',\r\n  speechBlue: '#3f51b5',\r\n  veryLightGrey: '#ccc',\r\n  lightGrey: '#999',\r\n  intermediateGrey: '#ede',\r\n  flatBlue: '#2f839d',\r\n  speechBlue: '#3f51b5',\r\n  errorRed: 'rgb(191, 49, 12)',\r\n  snow: '#fbfbfb',\r\n  whisper: '#eee',\r\n};\r\n\r\nexport default colorThemes;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  projects: [],\r\n  loading: false,\r\n};\r\n\r\nconst landing = createSlice({\r\n  name: 'projects',\r\n  initialState,\r\n  reducers: {\r\n    setProjectStart(state) {\r\n      state.loading = true;\r\n    },\r\n    setProjects(state, action) {\r\n      state.projects = action.payload;\r\n      state.loading = false;\r\n    },\r\n    addProjects(state, action) {\r\n      state.projects.push(action.payload);\r\n      state.loading = false;\r\n    },\r\n    setProjectFailure(state) {\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setProjectStart, setProjects, addProjects, setProjectFailure } = landing.actions;\r\nexport default landing.reducer;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport toasterReducer from '../slices/toasterSlice';\r\nimport landingReducer from '../pages/LandingPage/slice';\r\n\r\nconst reducerList = {\r\n  toaster: toasterReducer,\r\n  landing: landingReducer,\r\n};\r\n\r\nconst rootReducer = combineReducers(reducerList);\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst appStore = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport default appStore;\r\n","import styled from 'styled-components';\r\n\r\nconst MainLoaderWrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  height: 100vh;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${(props) => props.theme.pureWhite};\r\n  margin: auto;\r\n  z-index: 20;\r\n  .icon {\r\n    font-size: 40px;\r\n    color: ${(props) => props.theme.astronautBlue};\r\n  }\r\n`;\r\n\r\nexport default MainLoaderWrapper;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport MainLoaderWrapper from './style';\r\n\r\nconst MainLoader = () => (\r\n  <MainLoaderWrapper>\r\n    <FontAwesomeIcon spin icon={faSpinner} className=\"icon\" />\r\n  </MainLoaderWrapper>\r\n);\r\n\r\nexport default MainLoader;\r\n","module.exports = __webpack_public_path__ + \"static/media/Poppins-Light.2a47a29c.ttf\";","import styled from 'styled-components';\r\n\r\nexport const Mask = styled.div`\r\n  min-height: calc(100vh - 73px);\r\n  background: ${(props)=>props.theme.pureWhite};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  * {\r\n    max-width: 544px;\r\n  }\r\n`;\r\n\r\nexport const PlaceholderWrap = styled.div`\r\n  margin: 2rem;\r\n`;\r\nexport const Message = styled.div`\r\n  padding: 2rem;\r\n  width: 100%;\r\n  font-size: 1.8rem;\r\n  line-height: 3rem;\r\n  text-align: center;\r\n  color: '#f00'\r\n  box-sizing: border-box;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Mask, PlaceholderWrap, Message } from './style';\r\nimport { FailedLoading } from '../../configs/errorText';\r\nimport MainLoader from '../Loader';\r\n\r\nexport const ComponentLoading = ({ error, timedOut, pastDelay }) => {\r\n  if (error) {\r\n    return (\r\n      <Mask>\r\n        <PlaceholderWrap>\r\n          <Message status=\"error\" message={FailedLoading}>\r\n          </Message>\r\n        </PlaceholderWrap>\r\n      </Mask>\r\n    );\r\n  } else if (timedOut || pastDelay) {\r\n    return (\r\n      <Mask>\r\n        <MainLoader />\r\n      </Mask>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nComponentLoading.defaultProps = {\r\n  error: false,\r\n  timedOut: false,\r\n  pastDelay: true,\r\n};\r\n\r\nComponentLoading.propTypes = {\r\n  error: PropTypes.any,\r\n  timedOut: PropTypes.bool,\r\n  pastDelay: PropTypes.bool,\r\n};\r\n","import React from 'react';\r\nimport Loadable from 'react-loadable';\r\nimport { ComponentLoading } from '../../components/ComponentLoading';\r\n\r\nconst PageNotFoundComponent = Loadable({\r\n  loader: () => import('./component'),\r\n  loading: ComponentLoading,\r\n  timeout: 5000,\r\n});\r\n\r\nexport const PageNotFound = props => <PageNotFoundComponent {...props} />;\r\n\r\nPageNotFound.displayName = 'PageNotFound';","import React from 'react';\r\nimport Loadable from 'react-loadable';\r\nimport { ComponentLoading } from '../../components/ComponentLoading';\r\n\r\nconst LandingComponent = Loadable({\r\n  loader: () => import('./container'),\r\n  loading: ComponentLoading,\r\n  timeout: 5000,\r\n});\r\n\r\nexport const Landing = (props) => <LandingComponent {...props} />;\r\n\r\nLanding.displayName = 'PageNotFound';\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n// pages\r\nimport { PageNotFound } from '../pages/PageNotFound';\r\nimport { Landing } from '../pages/LandingPage';\r\n\r\nconst AppRouter = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/page-not-found\" component={PageNotFound} />\r\n        <Route path=\"/\" component={Landing} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import styled from 'styled-components';\r\nimport { media } from '../../configs/styles/mediaQueries';\r\n\r\nexport const Layout = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  margin: 7rem auto;\r\n  height: 30px;\r\n  width: auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  ${media.mediumScreen} {\r\n    left: 58rem;\r\n    margin: 9rem auto;\r\n  }\r\n  .toast-bar {\r\n    top: 10px;\r\n    padding: 10px;\r\n    border: ${(props) => (props.show ? `1px solid` : `0`)};\r\n    border-radius: 5px;\r\n    color: ${(props) => props.theme.pureWhite};\r\n  }\r\n  .warning {\r\n    background-color: ${(props) => props.theme.toastWarning};\r\n  }\r\n  .error {\r\n    background-color: ${(props) => props.theme.toastError};\r\n  }\r\n  .info {\r\n    background-color: ${(props) => props.theme.toastInfo};\r\n  }\r\n  .success {\r\n    background-color: ${(props) => props.theme.speechBlue};\r\n  }\r\n  .content-msg-wrapper {\r\n    width: calc(100% - 15px);\r\n  }\r\n  .closeBtn {\r\n    position: absolute;\r\n    top: 14px;\r\n    right: 15px;\r\n  }\r\n  #client-snackbar {\r\n    display: flex;\r\n    align-items: initial;\r\n  }\r\n  .message {\r\n    padding-left: 5px;\r\n  }\r\n  .icon {\r\n    font-size: 20px;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Layout } from './style';\r\nimport { updateToast } from '../../slices/toasterSlice';\r\n\r\nconst Toast = (props) => {\r\n  useEffect(() => {\r\n    if (props.toastObj.value !== false) {\r\n      setTimeout(() => {\r\n        handleClose();\r\n      }, 3);\r\n    }\r\n  }, [props.toastObj]);\r\n\r\n  const handleClose = () => {\r\n    props.updateToast({\r\n      value: false,\r\n      message: '',\r\n      variant: '',\r\n    });\r\n  };\r\n  return (\r\n    <Layout show={props.toastObj.value}>\r\n      <span onClick={handleClose} className={`toast-bar ${props.toastObj.variant}`}>\r\n        {props.toastObj.value && `${props.toastObj.message}`}\r\n      </span>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nToast.propTypes = {\r\n  updateToast: PropTypes.func.isRequired,\r\n  toastObj: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateToast: (toastObj) => dispatch(updateToast(toastObj)),\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    toastObj: state.toaster.toastObj,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Toast);\r\n","import React from 'react';\r\nimport AppRouter from './routes';\r\nimport Toast from '../src/components/Toast';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport colorThemes from './configs/styles/colorThemes';\r\nimport { Provider } from 'react-redux';\r\nimport appStore from './store';\r\n\r\nconst App = () => (\r\n  <Provider store={appStore}>\r\n    <ThemeProvider theme={colorThemes}>\r\n      <Toast />\r\n      <AppRouter />\r\n    </ThemeProvider>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/fonts/Poppins/Poppins-Light.ttf';\r\nimport './assets/font.css';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}